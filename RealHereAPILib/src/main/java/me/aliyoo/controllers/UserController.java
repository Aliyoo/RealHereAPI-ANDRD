/*
 * RealHereAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 06/02/2016
 */
package me.aliyoo.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;

import me.aliyoo.http.client.HttpClient;
import me.aliyoo.http.client.HttpContext;
import me.aliyoo.http.request.HttpRequest;
import me.aliyoo.http.response.HttpResponse;
import me.aliyoo.http.response.HttpStringResponse;
import me.aliyoo.http.client.APICallBack;
import me.aliyoo.*;
import me.aliyoo.models.*;

public class UserController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static UserController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the UserController class 
     */
    public static UserController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new UserController();
            }
        }
        return instance;
    }

    /**
     * 登录
     * @param    apikey    Required parameter: 密钥
     * @param    email    Required parameter: 登录邮箱
     * @param    password    Required parameter: 登录密码
     * @return	Returns the void response from the API call 
     */
    public void createLoginAsync(
                final String apikey,
                final String email,
                final String password,
                final APICallBack<Object> callBack
    ) {
        //validating required parameters
        if (null == apikey)
            throw new NullPointerException("The parameter \"apikey\" is a required parameter and cannot be null.");

        if (null == email)
            throw new NullPointerException("The parameter \"email\" is a required parameter and cannot be null.");

        if (null == password)
            throw new NullPointerException("The parameter \"password\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/user/login");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4953815688978352002L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "apikey", apikey );
            }
        };

        //load all fields for the outgoing API request
        Map<String, Object> _parameters = new HashMap<String, Object>() {
            private static final long serialVersionUID = 5281222135600480223L;
            {
                    put( "email", email );
                    put( "password", password );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 421)
                                throw new APIException("当前Email不存在", _context);

                            else if (_responseCode == 422)
                                throw new APIException("当前密码不匹配", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * 完善用户个人信息
     * @param    apikey    Required parameter: 密钥
     * @param    email    Required parameter: 用户邮箱
     * @param    userCom    Required parameter: 用户所属单位
     * @param    userName    Required parameter: 用户姓名
     * @param    comAddr    Optional parameter: 单位地址
     * @param    userNote    Optional parameter: 用户个人简介
     * @param    userTel    Optional parameter: 用户电话
     * @return	Returns the void response from the API call 
     */
    public void modifyUserInfoAsync(
                final String apikey,
                final String email,
                final String userCom,
                final String userName,
                final String comAddr,
                final String userNote,
                final String userTel,
                final APICallBack<Object> callBack
    ) {
        //validating required parameters
        if (null == apikey)
            throw new NullPointerException("The parameter \"apikey\" is a required parameter and cannot be null.");

        if (null == email)
            throw new NullPointerException("The parameter \"email\" is a required parameter and cannot be null.");

        if (null == userCom)
            throw new NullPointerException("The parameter \"userCom\" is a required parameter and cannot be null.");

        if (null == userName)
            throw new NullPointerException("The parameter \"userName\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/user/info");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4649535808576744875L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "apikey", apikey );
            }
        };

        //load all fields for the outgoing API request
        Map<String, Object> _parameters = new HashMap<String, Object>() {
            private static final long serialVersionUID = 4917354160915635675L;
            {
                    put( "email", email );
                    put( "userCom", userCom );
                    put( "userName", userName );
                    put( "comAddr", comAddr );
                    put( "userNote", userNote );
                    put( "userTel", userTel );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * 获取用户信息
     * @param    email    Required parameter: 用户邮箱
     * @return	Returns the void response from the API call 
     */
    public void getUserInfoAsync(
                final String email,
                final APICallBack<String> callBack
    ) {
        //validating required parameters
        if (null == email)
            throw new NullPointerException("The parameter \"email\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/user/info");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5144824857016283290L;
            {
                    put( "email", email );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4889335158251576417L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * 注册
     * @param    apikey    Required parameter: 密钥
     * @param    email    Required parameter: 注册邮箱
     * @param    pwd    Required parameter: 注册密码
     * @return	Returns the void response from the API call 
     */
    public void createLogUpAsync(
                final String apikey,
                final String email,
                final String pwd,
                final APICallBack<String> callBack
    ) {
        //validating required parameters
        if (null == apikey)
            throw new NullPointerException("The parameter \"apikey\" is a required parameter and cannot be null.");

        if (null == email)
            throw new NullPointerException("The parameter \"email\" is a required parameter and cannot be null.");

        if (null == pwd)
            throw new NullPointerException("The parameter \"pwd\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/user/logup");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5220462878859957796L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "apikey", apikey );
            }
        };

        //load all fields for the outgoing API request
        Map<String, Object> _parameters = new HashMap<String, Object>() {
            private static final long serialVersionUID = 5314686084085165679L;
            {
                    put( "email", email );
                    put( "pwd", pwd );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().post(_queryUrl, _headers, APIHelper.prepareFormFields(_parameters));

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 409)
                                throw new APIException("邮箱已被注册", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _result = ((HttpStringResponse)_response).getBody();
                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}