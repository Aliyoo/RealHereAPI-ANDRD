/*
 * RealHereAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 06/02/2016
 */
package me.aliyoo.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;

import me.aliyoo.http.client.HttpClient;
import me.aliyoo.http.client.HttpContext;
import me.aliyoo.http.request.HttpRequest;
import me.aliyoo.http.response.HttpResponse;
import me.aliyoo.http.response.HttpStringResponse;
import me.aliyoo.http.client.APICallBack;
import me.aliyoo.*;
import me.aliyoo.models.*;

public class TestController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static TestController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the TestController class 
     */
    public static TestController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new TestController();
            }
        }
        return instance;
    }

    /**
     * 测试用API
     * @param    apikey    Required parameter: 访问密钥
     * @param    cityname    Required parameter: 城市名
     * @return	Returns the void response from the API call 
     */
    public void getForTestAsync(
                final String apikey,
                final String cityname,
                final APICallBack<TestRetModel> callBack
    ) {
        //validating required parameters
        if (null == apikey)
            throw new NullPointerException("The parameter \"apikey\" is a required parameter and cannot be null.");

        if (null == cityname)
            throw new NullPointerException("The parameter \"cityname\" is a required parameter and cannot be null.");

        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/citylist");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5086309221109241610L;
            {
                    put( "cityname", cityname );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4693599616790661969L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
                    put( "apikey", apikey );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            TestRetModel _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<TestRetModel>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}